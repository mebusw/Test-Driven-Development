Copyright (c) Renaissance Software Consulting
---------------------------------------------

Objectives
----------
Practice TDD on a leaf node module.
Build useful, fully tested code.
Get the feel for working in small verifiable steps.
Experience pair programming.

General Instructions
--------------------
This is a simulation of you and your partner pair programming with me, an
experienced TDD programmer.

DO NOT WRITE CODE UNLESS THERE IS A FAILING TEST CASE REQUIRING THAT CODE.

Partner asks "Do you have a test for that?" when you see the code has
gotten ahead of the tests.

WARNING: As your instructor, I reserve the right to delete any 
code not required by your current test cases.  You might consider 
it as my duty!

Build the exercises workspace and find the failing test case.  Make the 
failing tests pass by deleting the line causing the failure.

Enable ONE test at a time by moving the #ifdef down the file.  Compile, 
run, write code to make it pass.  Read the comments as you go for hints 
and instructions.  

If there are lines of code commented out, enable one line of code at
a time. Compile and run the tests.  Write code first to make compile
and link errors go away and finally pass the test.  You are pairing with me,
an experienced TDD programmer, so we work in small steps with regular feedback.

Keep your code warning free.

Requirements
------------
The circular buffer holds integers, obeying first-in first-out behavior.
Make sure it handles boundaries and errors right.

---------------------
We're playing TDD ping pong.  I write a test, you make it pass.
